// License Information:
// ARF_src/API/Audio.neil
// Apollo - Audio link
// version: 22.07.18
// Copyright (C) 2020, 2021, 2022 Jeroen P. Broks
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information
import Apollo_Panic

Table AAUA = LGGTTT("AAUA")


Bool AllowCAudio = false


Class Audio
	
	ReadOnly String Tag
	ReadOnly Bool AutoDestruct
	Static Bool Chat=false
	Static Get Int MaxVolume
		Return AAUA.MAXVOLUME()
	End
	
	Constructor(string T, Bool AD)
		if !AllowCAudio
			Apollo_Panic("Direct object creation not allowed for the Audio Class")
			return
		end
		Tag=T
		AutoDestruct = AD
	End
	
	Destructor
		if AutoDestruct
			if Chat
				Print("Destroyed Audio: ",Tag)
			end
			AAUA.KILL(Tag)
		End
	End
	
	Static Void Kill(String Tag)
		AAUA.KILL(Tag)
	End
	
	Static Var Load(String File, String ATag="")
		String GT = AAUA.LOAD(ATag,Lua.Neil.Globals.JCR6.dEnt(File),ApolloState.Name)
		AllowCAudio = true
		var Ret = New Audio(GT,ATag=="")
		AllowCAudio = false
		Print("Loaded Audio: "..Ret.Tag.." (from file: "..File..")")
		return Ret
	End
		
	//Int Play(Infinity) // Infinity appears to be broken (when this code was written), so this will have to do!
	Int Play(a,b,c)
		//plua arg = {Infinity}
		plua arg={a,b,c}
		// c has to make sure the third argument is not defined, and the switch statement below would always detect that!
		Switch TableTypeChain(arg)
			case "nothing"
				return AAUA.PLAY(Tag,-1,0,ApolloState.Name)
			case "number"
				return AAUA.PLAY(Tag,arg[1],0,ApolloState.Name)
			case "number,number"
				return AAUA.PLAY(Tag,arg[1],arg[2],ApolloState.Name)
			case "boolean"
				int l = 0
				if arg[1] 
					l=-1
				end
				return AAUA.PLAY(Tag,-1,l,ApolloState.Name)
			case "number,boolean"
				int l = 0
				if arg[2] 
					l=-1
				end
				return AAUA.PLAY(Tag,arg[1],l,ApolloState.Name)
			default
				Apollo_Panic("Illegal Method Call.\nAudio.Play() received these parameters: "..TableTypeChain(arg).."\nYou intension has not been understood")
				return 0
		End
	End
	
	static Var Obtain(String Tag)
		AllowCAudio = true
		var Ret = New Audio(Tag,false)
		AllowCAudio = false
		return ret
	End
	
	Static ReadOnly Delegate ChannelPlaying = AAUA.CHANNELPLAYING
	
	static Bool HasTag(string Tag)
		return AAUA.HASTAG(Tag,ApolloState.Name)
	end
	
	Static Var LoadNew(string File,String Tag)
		if HasTag(Tag)
			return Obtain(Tag)
		else
			return Load(File,Tag)
		end
	end
	
	Static Void Stop(channel)
		AAUA.STOP(channel or -1);
	End
	
	Static Void Volume(int channel, int vol,pure)
		Static Table bp = {[true]=1, [false]=0}
		AAUA.VOLUME(channel,vol,bp[pure==true])
	End
	
End