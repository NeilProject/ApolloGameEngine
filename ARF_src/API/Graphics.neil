// License Information:
// ARF_src/API/Graphics.neil
// Apollo - Graphics Linkup
// version: 21.02.14
// Copyright (C) 2020, 2021 Jeroen P. Broks
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

Table AGGA = LGGTTT("AGGA")
Table AIMG = LGGTTT("AIMG")
Table AFNT = LGGTTT("AFNT")
import Apollo_Panic

QuickMeta Graphics

	index
		key = key:upper()
		if Key=="SETSCALE"
			key="SCALE"
		end
		If Not AGGA[key]
			Apollo_Panic("Module Graphics does not have an element named: "..key)
		End
		Return AGGA[key]
	end

	newindex
		Apollo_Panic("All elements of module Graphics are read-only! And that includes: " .. key .. "\nSo value '"..tostring(value).."' cannot be assinged to it!")
	End
	
End

QuickMeta GFX_Rotation
	index
		switch key:upper()
			case "DEG" "DEGREES"
				return AIMG.GETROTATION(0)
			case "RAD" "RADIANS"
				return AIMG.GETROTATION(1)
			case "GRA" "GRAD" "GRADIANS"
				return AIMG.GETROTATION(2)
			default
				Lua.error("Unknown rotation kind: "..key)
		end
	end
	
	newindex
		switch key:upper()
			case "DEG" "DEGREES"
				AIMG.SETROTATION(0,value)
			case "RAD" "RADIANS"
				AIMG.SETROTATION(1,value)
			case "GRA" "GRAD" "GRADIANS"
				AIMG.SETROTATION(2,value)
			default
				Lua.error("Unknown rotation kind: "..key)
		end
	end
end

//Init
//	For k,v in SPAIRS(AGGA)
//		print(type(v),k,"=",v)
//	End
//End

bool AllowCImage = false
bool AllowCFont = false

Class Image
	
	ReadOnly String Tag
	ReadOnly Bool AutoDestruct
	static String RotateBy = "Degrees"
	
	static get number Rotate
		return GFX_Rotation[RotateBy]
	end
	static Set number Rotate
		GFX_Rotation[RotateBy] = value
	end

	static get number Rotation
		return GFX_Rotation[RotateBy]
	end
	static Set number Rotation
		GFX_Rotation[RotateBy] = value
	end
	
	
	Private Constructor(string ATag)
		if !AllowCImage
			Apollo_Panic("new Image() may not be called directly!")
			// Is a bit awkward, but Neil does not support private constructors
			return
		end
		If Prefixed(ATag,"**") || Suffixed(ATag,"**")
			Apollo_Panic("** suffix or prefix for image tags reserved!")
			return
		end		
		Tag = ATag
	End
	
	Destructor
		If AutoDestruct
			AIMG.Kill(Tag)
		End
	End
	
	Static Var Obtain(String Tag)
		AllowCImage = true
		var Ret = new Image(Tag)
		AllowCImage = false
		return ret
	end
	
	Static Var Load(String File,String Tag="")
		//for k,v in spairs(AIMG)
		//	print(Lua.type(v),k)
		//End
		AllowCImage = true
		String NTag = AIMG.LOAD(File,Tag)
		var Ret = new Image(NTag)
		AllowCImage = false
		Return Ret
	End
	
	Static Var LoadAnim(String File,int w, int h, int frames,String Tag="")
		AllowCImage = true
		String NTag = AIMG.LOADANIM(File,Tag,w,h,frames)
		var Ret = new Image(NTag)
		AllowCImage = false
		Return Ret
	End
	
	static Bool TagExists(string Tag)
		return AIMG.TAGEXISTS(Tag)
	end
	
	Static Var LoadNew(string File,string Tag)
		if TagExists(Tag)
			return Obtain(tag)
		else
			return Load(File,Tag)
		end
	end
	
	Static Delegate KillTag = AIMG.KILL
	
	Void Kill()
		AIMG.KILL(Tag)
	end
	
	Void Draw(int x, int y, int frame=0)
		AIMG.DRAW(ApolloState.Name,Tag,x,y,frame)
	End
	Void XDraw(int x, int y, int frame=0)
		AIMG.XDRAW(ApolloState.Name,Tag,x,y,frame)
	End

	Void Tile(int x, int y, int w, int h,int frame=0)
		AIMG.TILE(ApolloState.Name,Tag,x,y,w,h,frame)
	End

	Void Stretch(int x, int y, int w, int h,int frame=0)
		AIMG.STRETCH(ApolloState.Name,Tag,x,y,w,h,frame)
	End

	
	void Hot(Int x, int y)
		AIMG.HOT(ApolloState.Name,Tag,x,y)
	end
	
	void HotCenter()
		AIMG.HOTCENTER(ApolloState.Name,Tag)
	End
	
	void HotBottomCenter()
		AIMG.HOTBOTTOMCENTER(ApolloState.Name,Tag)
	end
	
	Get Int Width
		return AIMG.IMGWIDTH(ApolloState.Name,Tag)
	end
	
	Get Int Height
		return AIMG.IMGHEIGHT(ApolloState.Name,Tag)
	end
	Get Int W
		return AIMG.IMGWIDTH(ApolloState.Name,Tag)
	end
	
	Get Int H
		return AIMG.IMGHEIGHT(ApolloState.Name,Tag)
	end
		
	static var GrabScreen(String Tag="")
		AllowCImage = true
		String NTag = AIMG.GRABSCREEN(ApolloState.Name,Tag)
		var Ret = new Image(NTag)
		AllowCImage = false
		return ret
	end
	
	static var Copy(Ori,string Tag="")
		string OriTag
		Switch Lua.type(Ori)
			case "string"
				OriTag = Ori
			case "table"
				OriTag = Ori.Tag
				Lua.assert(Lua.type(OriTag)=="string","Invalid original for copy")
			default
				Lua.error("I cannot copy original "..tostring(Ori))
		end
		AllowCImage = true
		String NTag = AIMG.COPY(ApolloState.Name,OriTag,Tag)
		var Ret = new Image(NTag)
		AllowCImage = false
		return ret
	end

	static var Negative(Ori,string Tag="")
		string OriTag
		Switch Lua.type(Ori)
			case "string"
				OriTag = Ori
			case "table"
				OriTag = Ori.Tag
				Lua.assert(Lua.type(OriTag)=="string","Invalid original for negative copy")
			default
				Lua.error("I cannot negative copy original "..tostring(Ori))
		end
		AllowCImage = true
		String NTag = AIMG.NEGATIVE(ApolloState.Name,OriTag,Tag)
		var Ret = new Image(NTag)
		AllowCImage = false
		return ret
	end
	
end

group Screen
	Get Int Width
		return AGGA.SCREENW()
	End
	Get Int W
		return AGGA.SCREENW()
	End
	Get Int H
		return AGGA.SCREENH()
	End
	
	Get Int Height
		return AGGA.SCREENH()
	End
	
	readonly delegate Grab = Image.GrabScreen
End


Class ImageFont
	readonly String Tag
	ReadOnly Bool AutoDestruct
	
	Constructor(String File,String ATag)
		if !AllowCFont
			Apollo_Panic("new ImageFont() may not be called directly!")
			// Is a bit awkward, but Neil does not support private constructors
			return
		end
		AutoDestruct = ATag==""
		Tag = ATag
	end
	
	Static Var Load(String File,String ATag="")
		AllowCFont = true
		string NTag = AFNT.LOADIMAGEFONT(ApolloState.Name,ATag,File)
		var ret = new ImageFont(File,NTag)
		AllowCFont = False
		return ret
	End
	
	Static Var Obtain(String NTag)
		AllowCFont = true	
		AFNT.ASSERTFONT(ApolloState.Name,NTag)
		var ret = new ImageFont("",NTag)
		AllowCFont = false
		return ret
	end
	
	void Text(String Txt, int x, int y, int ah=0, int av=0, bool autonext=false)
		int an=0
		if autonext
			an=1
		end
		AFNT.DRAWTEXT(ApolloState.Name,Tag,Txt,x,y,ah,av,an)
	end
	
	set bool Fixed 
		if value
			AFNT.FIX(ApolloState.Name,Tag,1)
		else
			AFNT.FIX(ApolloState.Name,Tag,0)
		end
	end
	
	get bool Fixed
		return AFNT.GFIX(ApolloState.Name,Tag)
	end
	
	int TextWidth(string txt)
		return AFNT.TXTW(ApolloState.Name,Tag,Txt)
	end
	
	int TextHeight(string txt)
		return AFNT.TXTH(ApolloState.Name,Tag,Txt)
	end
	
	void DarkText(String Txt, int x, int y, int ah=0, int av=0, bool autonext=false)
		int r
		int g
		int b
		r,g,b = Graphics.GetColor()
		Graphics.Color(0,0,0)
		for ix=x-1,x+1
			for iy=y-1,y+1
				Text(Txt,ix,iy,ah,av,autonext)
			end
		end
		Graphics.Color(r,g,b)
		Text(Txt,x,y,ah,av,autonext)
	end

end