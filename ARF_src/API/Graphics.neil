// License Information:
// ARF_src/API/Graphics.neil
// Apollo - Graphics Linkup
// version: 20.08.28
// Copyright (C) 2020 Jeroen P. Broks
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information
Table AGGA = LGGTTT("AGGA")
Table AIMG = LGGTTT("AIMG")
import Apollo_Panic

QuickMeta Graphics

	index
		key = key:upper()
		If Not AGGA[key]
			Apollo_Panic("Module Graphics does not have an element named: "..key)
		End
		Return AGGA[key]
	end

	newindex
		Apollo_Panic("All elements of module Graphics are read-only! And that includes: " .. key .. "\nSo value '"..tostring(value).."' cannot be assinged to it!")
	End
	
End

//Init
//	For k,v in SPAIRS(AGGA)
//		print(type(v),k,"=",v)
//	End
//End

bool AllowCImage = false

Class Image
	
	ReadOnly String Tag
	ReadOnly Bool AutoDestruct
	
	Private Constructor(string ATag)
		if !AllowCImage
			Apollo_Panic("new Image() may not be called directly!")
			// Is a bit awkward, but Neil does not support private constructors
			return
		end
		If Prefixed(ATag,"**") || Suffixed(ATag,"**")
			Apollo_Panic("** suffix or prefix for image tags reserved!")
			return
		end		
		Tag = ATag
	End
	
	Destructor
		If AutoDestruct
			AIMG.Kill(Tag)
		End
	End
	
	Static Var Load(String File,String Tag="")
		//for k,v in spairs(AIMG)
		//	print(Lua.type(v),k)
		//End
		AllowCImage = true
		String NTag = AIMG.LOAD(File,Tag)
		var Ret = new Image(NTag)
		AllowCImage = false
		Return Ret
	End
	
	Static Delegate KillTag = AIMG.KILL
	
	Void Kill()
		AIMG.KILL(Tag)
	end
	
	Void Draw(int x, int y, int frame=0)
		AIMG.DRAW(ApolloState.Name,Tag,x,y,frame)
	End
	
	void Hot(Int x, int y)
		AIMG.HOT(ApolloState.Name,Tag,x,y)
	end
	
	void HotCenter()
		AIMG.HOTCENTER(ApolloState.Name,Tag)
	End
	
end

group Screen
	Get Int Width
		return AGGA.SCREENW()
	End
	Get Int W
		return AGGA.SCREENW()
	End
	Get Int H
		return AGGA.SCREENH()
	End
	
	Get Int Height
		return AGGA.SCREENH()
	End
End


Class ImageFont
	Var Load(String File,String Tag="")
		// Full content comes later
	End
End
