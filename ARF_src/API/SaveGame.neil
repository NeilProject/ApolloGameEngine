// License Information:
// ARF_src/API/SaveGame.neil
// Apollo
// version: 20.10.01
// Copyright (C) 2020 Jeroen P. Broks
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

Table ASGM = LGGTTT("ASGM")

quickmeta SaveGameData
	newindex
		Lua.assert(lua.type(key)=="string","SaveGame.DATA[<"..lua.type(key)..">]????? Key must be a string!")
		ASGM.SETDATA(key:upper(),tostring(value))
	end
	
	index
		Lua.assert(lua.type(key)=="string","SaveGame.DATA[<"..lua.type(key)..">]????? Key must be a string!")
		return ASGM.GETDATA(key:upper()) or Lua.error("Retrieving SaveGame Data failed! > "..key)
	end
	
	len
		return ASGM.COUNTDATA()
	end
	
	
end

quickmeta SaveGame

	index
		Lua.assert(lua.type(key)=="string","SaveGame[<"..lua.type(key)..">]????? Key must be a string!")		
		Key = Key:upper()
		if Key=="DATA"
			return SaveGameData
		end
		assert(ASGM[key],"SaveGame does not have a member named \""..key.."\"!")
		return ASGM[Key]
	end
	
	newindex
		Lua.assert(lua.type(key)=="string","SaveGame[<"..lua.type(key)..">]????? Key must be a string!")		
		Key = Key:upper()
		Lua.error("All SaveGame members are read-only!")
	end
		

end