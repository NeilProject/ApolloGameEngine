// License Information:
// ARF_src/API/GINIE.neil
// GINIE for Apollo
// version: 22.05.10
// Copyright (C) 2022 Jeroen P. Broks
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information
Table AGIN = LGGTTT("AGIN")


Class GINIE
	ReadOnly Static String State = ApolloState.Name 
	Static Bool Has(string Tag)
		Return AGIN.HAS(State,Tag:upper())
	End
	
	Static Var Load(string File,string Tag="")
		AGIN.CREATE(State,Tag:upper(),File,4)
		return new GINIE(Tag)
	End
	
	Static Var Create(string Tag="")
		AGIN.CREATE(State,Tag:upper(),"",0)
		return new GINIE(Tag)
	End
	
	Static Var CreateNew(string Tag)
		If !Has(Tag)
			//Print(State..">","Creating GINIE:"..Tag) // DEBUG ONLY!
			return Create(Tag)
		End
		//Return new GINIE(Tag)
		return self.Obtain(Tag)
	End
	
	Static Var Parse(string Tag,Src)
		AGIN.CREATE(State,Tag:upper(),Src,3)
		return new GINIE(Tag)
	End
	
	Static Var Obtain(String Tag)
		If !Has(Tag)
			Lua.error("There is no GINIE object tagged: "..Tag)
		Else
			Return new GINIE(Tag)
		End
	End
	
	Static Var LoadNew(String File,String Tag)
		If Has(Tag)
			return Obtain(Tag)
		Else
			Return Load(File,Tag)
		End
	End
	
	ReadOnly String _Tag
	Constructor(string Tag)
		Lua.assert(Tag!="","Trying to create tagless GINIE object!")
		_Tag = Tag:upper()
	End
	
	String Value(string Cat,string Key,_Value)
		If _Value!=nil
			AGIN.SETVAL(State,_Tag,Cat,Key,Lua.tostring(_Value))
			Return _Value
		Else
			//printf("GINIE.%s[%s,%s]='%s' (%s)\n",_Tag,Cat,Key,Lua.tostring(AGIN.GETVAL(State,_Tag,Cat,Key)),Lua.type(AGIN.GETVAL(State,_Tag,Cat,Key)))
			Return AGIN.GETVAL(State,_Tag,Cat,Key)
		End
	End
	
	Number NValue(String Cat, string Key)
		return Lua.tonumber(Value(Cat,Key)) || 0
	End
	
	Void Add(string Cat,String Key,string Val)
		AGIN.LISTAD(State,_Tag,Cat,Key,Val)
	End
	
	Int Count(String Cat,String Key)
		Return AGIN.LISTCN(State,_Tag,Cat,Key)
	End
	
	String ListGet(String Cat,String Key, Int idx)
		Return AGIN.LISTGT(State,_Tag,Cat,Key,Idx)
	End
	
	Var ListCopy(String Cat,String Key)
		Var Ret
		Ret = {}
		For i=1,Count(Cat,Key)
			Ret[i]=ListGet(Cat,Key,i-1)
		End
		Return Ret
	End
	
	Bool ListHas(String Cat,String Key, String Value,ignorecase)
		if ignorecase
			Value=Value:upper()
		end
		For i=1,Count(Cat,Key)
			String G = ListGet(Cat,Key,i-1)
			if ignorecase
				G = G:upper()
			end
			if G==Value
				Return True
			end
		End
		Return False
	End
		
	
	Var ListPairs(String Cat,String Key)
		Int c = Count(Cat,Key)
		Int i = -1
		Return Var()
			i++
			if i>=c
				return nil,nil
			end
			return i,ListGet(Cat,key,i)
		End		
	End
	
	Var ListEach(String Cat,String Key)
		Int c = Count(Cat,Key)
		int i = -1
		Var R()
			i++
			if i>=c
				return nil
			end
			return ListGet(Cat,key,i)
		End
		Return R
	End
	
	Get Var Categories
		Return Split(AGIN.CATEGORIES(State,_Tag),"\n")
	End
	
	Get String UnParseMe
		Return AGIN.UNPARS(State,_Tag)
	End
	
	Static String UnParse(string Tag)
		Return AGIN.UNPARS(State,Tag)
	End
End