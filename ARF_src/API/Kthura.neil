// License Information:
// ARF_src/API/Kthura.neil
// Apollo - Kthura Linker
// version: 21.10.31
// Copyright (C) 2020, 2021 Jeroen P. Broks
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

Table AKTH = LGGTTT("AKTHURA")
import Apollo_Panic



class KTHURA_Object
	readonly int MapID
	readonly string MapTag
	readonly string LayerTag
	readonly int ObjID
	
	void Verify()
		AKTH.VERIFYOBJECT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID)
	end
	
	table FInt
	table FStr
	table FBool
	
	readonly table Data
	
	public Constructor(int aID, string aMapTag, string aLayer, int aObjID)
		MapID=aID
		MapTag=aMapTag
		LayerTag=aLayer
		ObjID=aObjID
		plua k
		plua v
		
		string DataIndex(ignore,string key)
			//return AKTH.GETDATA(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,key)
			return AKTH.GETDATA(aMapTag,ApolloState.Name,aID,LayerTag,"number",aObjID,key)
		end
		
		void DataNewIndex(ignore,string key,string value)
			//AKTH.SETDATA(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,key,value)
			AKTH.SETDATA(aMapTag,ApolloState.Name,aID,LayerTag,"number",aObjID,key,value)
		end
		
		Data = lua.setmetatable({},{["__index"]=DataIndex,["__newindex"]=DataNewIndex})
		
	end
	
	void SetData(string key,string value)
		AKTH.SETDATA(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,key,value)
	end
	
	string GetData(string key)
		return AKTH.GETDATA(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,key)
	end
		
	// Receive
	
	Get Int ID
		return AKTH.GETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"ID")
	end
	
	Get Int X
		return AKTH.GETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"X")
	End

	Get Int Y
		return AKTH.GETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"Y")
	End

	Get Int W
		return AKTH.GETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"W")
	End
	
	Get Int H
		return AKTH.GETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"H")
	End
	
	Get Int InsertX
		return AKTH.GETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"INSX")
	end
	
	Get Int InsX
		return InsertX
	End
	
	Get Int InsertY
		return AKTH.GETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"INSY")
	End
	
	Get Int InsY
		Return InsertY
	End

	Get Int R
		return AKTH.GETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"R")
	End
	
	Get Int G
		return AKTH.GETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"G")
	End
	
	Get Int B
		return AKTH.GETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"B")
	End
	
	Get Int Alpha
		return AKTH.GETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"ALPHA")
	End
	
	Get Int ScaleX
		return AKTH.GETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"SCALEX")
	End
	
	Get Int ScaleY
		return AKTH.GETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"SCALEY")
	End
	
	Get Int Dominance
		return AKTH.GETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"DOMINANCE")
	End
	
	Get Int Rotation
		return AKTH.GETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"ROTATION")
	End
	
	Get Int AnimSpeed
		return AKTH.GETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"ANIMSPEED")
	End
	
	Get Int AnimFrame
		return AKTH.GETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"ANIMFRAME")
	End
	
	Get Int Blend
		return AKTH.GETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"BLEND")
	End
	
	Get String Kind
		return AKTH.GETOBJSTR(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"KIND")
	End
	
	get String Texture		
		return AKTH.GETOBJSTR(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"TEXTURE")
	end

	get string Wind
		return AKTH.GETOBJSTR(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"WIND")
	end
	
	Get String Labels
		return AKTH.GETOBJSTR(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"LABELS")
	end
	
	Get Bool Impassible
		return AKTH.GETOBJBOOL(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"IMPASSIBLE")
	end
	
	Get Bool ForcePassible
		return AKTH.GETOBJBOOL(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"FORCEPASSIBLE")
	end
	
	Get Bool Visible
		return AKTH.GETOBJBOOL(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"VISIBLE")
	end
	
	bool XVisible(int camx,int camy)
		return AKTH.GETOBJBOOL(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"XVISIBLE",camx,camy)
	end



	get bool NotMovingThen0
		return AKTH.GETOBJBOOL(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"NOTMOVINGTHEN0")
	end


	// DEFINE
	
	Set Int ID
		AKTH.SETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"ID", Value)
	end
	
	Set Int X
		AKTH.SETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"X", Value)
	End

	Set Int Y
		AKTH.SETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"Y", Value)
	End

	Set Int W
		AKTH.SETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"W", Value)
	End
	
	Set Int H
		AKTH.SETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"H", Value)
	End
	
	Set Int InsertX
		AKTH.SETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"INSX", Value)
	end
	
	Set Int InsX
		InsertX = Value
	End
	
	Set Int InsertY
		AKTH.SETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"INSY", Value)
	End
	
	Set Int InsY
		InsertY = Value
	End

	Set Int R
		AKTH.SETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"R", Value)
	End
	
	Set Int G
		AKTH.SETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"G", Value)
	End
	
	Set Int B
		AKTH.SETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"B", Value)
	End
	
	Set Int Alpha
		AKTH.SETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"ALPHA", Value)
	End

	Set Int Alpha255
		AKTH.SETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"ALPHA", Value)
	End

	Set Int ScaleX
		AKTH.SETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"SCALEX", Value)
	End
	
	Set Int ScaleY
		AKTH.SETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"SCALEY", Value)
	End
	
	Set Int Dominance
		AKTH.SETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"DOMINANCE", Value)
	End
	
	Set Int Rotation
		AKTH.SETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"ROTATION", Value)
	End
	
	Set Int AnimSpeed
		AKTH.SETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"ANIMSPEED", Value)
	End
	
	Set Int AnimFrame
		AKTH.SETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"ANIMFRAME", Value)
	End

	Set Int Blend
		AKTH.SETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"BLEND", Value)
	End

	Set Int Frame
		self.AnimFrame=value
	end
	
	Set String Kind
		AKTH.SETOBJSTR(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"KIND", Value)
	End
	
	Set String Texture		
		AKTH.SETOBJSTR(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"TEXTURE", Value)
	end

	set String Wind
		AKTH.SETOBJSTR(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"WIND", Value)
	end

	
	Set String Labels
		AKTH.SETOBJSTR(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"LABELS", Value)
	end
	
	get string Tag
		return AKTH.GETOBJSTR(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"TAG")
	end
	
	set string Tag
		AKTH.SETOBJSTR(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"TAG", Value)
	end
	
	get table DumpData
		print("DumpDataCall!")
		string r = AKTH.DUMPOBJECTDATA(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID)
		print(r)
		return Split(r,"\n")
	end
	
	SET Bool Impassible
		if Value
			AKTH.SETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"IMPASSIBLE", 1)
		else
			AKTH.SETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"IMPASSIBLE", 0)
		End
	end
	
	SET Bool ForcePassible
		If Value
			AKTH.SETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"FORCEPASSIBLE", 1)
		Else
			AKTH.SETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"FORCEPASSIBLE", 0)
		End
	end
	
	set bool Visible
		If Value
			AKTH.SETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"VISIBLE", 1)
		Else
			AKTH.SETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"VISIBLE", 0)
		End
		
	end
	
	

	set bool NotMovingThen0
		if Value
			AKTH.SETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"NOTMOVINGTHEN0", 1)
		else
			AKTH.SETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"NOTMOVINGTHEN0", 0)
		end
	end
	
	get bool Walking
		return AKTH.GETOBJBOOL(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"WALKING")
	end
	
	Get bool Moving
		return AKTH.GETOBJBOOL(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"Moving")
	End
	
	void StopWalking()
		AKTH.SETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"WALKING", 0)
		AKTH.SETOBJINT(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,"MOVING", 0)
	end
	
	void WalkTo(a,b,c)
		static delegate t = Lua.type
		if t(a)=="number" and t(b)=="number"
			int r = 0
			if c!=false
				r = 1
			end
			AKTH.WALKTO(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,a,b,r)
		elseif t(a)=="string"
			AKTH.WALKTOOBJ(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,a)
		else
			Lua.error("Invalid WalkTo request!")
		end
	end

	void MoveTo(a,b,c)
		static delegate t = Lua.type
		if t(a)=="number" and t(b)=="number"
			AKTH.MOVETO(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,a,b)
		elseif t(a)=="string"
			AKTH.MOVETOOBJ(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,a)
		else
			Lua.error("Invalid MoveTo request!")
		end
	end
	
	bool IsInZone(string zone)
		return AKTH.ISINZONE(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,zone)
	end
	
	bool PixInObj(int x, int y)
		return AKTH.PIXINOBJ(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID,x,y)
	end
	
	get string PixArea
		return AKTH.OBJPIXAREA(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID)
	end
	
	
	
end

class KTHURA_Layer
	readonly int MapID
	readonly string MapTag
	readonly string LayerTag
	
	public Constructor(int aID, string aMapTag, string aLayer)
		AKTH.VERIFY(aMapTag,ApolloState.Name,aID)
		AKTH.HASLAYER(aMapTag,ApolloState.Name,aID,aLayer)
		MapID=aID
		MapTag=aMapTag
		LayerTag=aLayer
	End
	
	void RemapDominance()
		AKTH.REMAPDOMINANCE(MapTag,ApolloState.Name,MapID,LayerTag)
	end
	
	Get Int ObjCount
		return AKTH.COUNTOBJECTS(MapTag,ApolloState.Name,MapID,LayerTag)
	End
	
	var Obj(I_want)
		//Print("I want it all! And I want it now!")
		Int ObjID = AKTH.VERIFYOBJECT(MapTag,ApolloState.Name,MapID,LayerTag,Lua.type(I_want),I_want)
		//return new KTHURA_Object(MapTag,ApolloState.Name,MapID,LayerTag,"number",ObjID)
		  return new KTHURA_Object(MapID, MapTag,  LayerTag, ObjID)
	end
	
	
	Get Table ObjEnum
		//print("ObjEnum")
		//print(Serialize("Invisible Kthura Module",AKTH))
		//return { AKTH.ENUMOBJECTS(MapTag,ApolloState.Name,MapID,LayerTag) }
		Return Split(AKTH.ALTENUMOBJECTS(MapTag,ApolloState.Name,MapID,LayerTag),";")
	End
	
	Get String ObjEnumString
		Return AKTH.ALTENUMOBJECTS(MapTag,ApolloState.Name,MapID,LayerTag)
	End
	
	Get Delegate EachObject
		int i = 0
		table OE = ObjEnum
		//print(Serialize("EachObject >> OE",OE))
		var Ret()
			i++
			if i>#OE
				return null
			end
			//Print("DEBUG EACHOBJECT: ",i,#OE,OE[i])
			Plua R = Obj(Lua.tonumber(OE[i]))
			//Print("DEBUG ECACHOBJECT: Returning: ",R)
			Return R
		end
		return Ret
	end
	
	void Draw(int ScrollX=0, int ScrollY=0,int StartX=0,int StartY=0)
		AKTH.DRAW(MapTag,ApolloState.Name,MapID,LayerTag,ScrollX,ScrollY,StartX,StartY)
	End
	
	get string TagList
		string ret = AKTH.GETTAGS(MapTag,ApolloState.Name,MapID,LayerTag)
		// print("Taglist: ",ret)
		return ret
	end
	
	get table TagListArray
		return Split(TagList,",")
	end
	
	get string DomDump
		string ret = AKTH.DUMPDOM(MapTag,ApolloState.Name,MapID,LayerTag)
		return ret
	end
	
	get string DumpBlockMap
		return AKTH.DUMPBLOCKMAP(MapTag,ApolloState.Name,MapID,LayerTag)
	end
	
	get table DumpBlockMapTable
		return Split(DumpBlockMap,"\n")
	end
	
	void Spawn(string Actor,a,b)
		static delegate t = Lua.type
		if t(a)=="number" and t(b)=="number"
			//             1      2                3     4        5 6 7
			AKTH.SPAWNSPOT(MapTag,ApolloState.Name,MapID,LayerTag,a,b,Actor)
		elseif t(a)=="string"
			AKTH.SPAWNOBJTAG(MapTag,ApolloState.Name,MapID,LayerTag,"string",a,Actor)
		else			
			Lua.error("Invalid spawn request! ("..Lua.type(Actor)..":"..Actor.."; "..Lua.type(a)..":"..Lua.tostring(a).."; "..Lua.type(b)..":"..Lua.tostring(b)..")")
		end

	end
	
	get bool AnythingMoving
		return AKTH.ANYTHINGMOVING(MapTag,ApolloState.Name,MapID,LayerTag)
	end
	
	void Kill(objid)
		AKTH.KILLOBJECT(MapTag,ApolloState.Name,MapID,LayerTag,lua.type(objid),objid)
	end
	
	bool HasTag(string tag)
		return AKTH.HASTAG(MapTag,ApolloState.Name,MapID,LayerTag,tag)
	end
	
	void ShowByLabel(string label)
		AKTH.SHOWBYLABEL(MapTag,ApolloState.Name,MapID,LayerTag,label)
	end

	void HideByLabel(string label)
		AKTH.HIDEBYLABEL(MapTag,ApolloState.Name,MapID,LayerTag,label)
	end
	
	void KillByLabel(string label)
		AKTH.KILLBYLABEL(MapTag,ApolloState.Name,MapID,LayerTag,label)
	End

	void ShowButLabel(string label)
		AKTH.SHOWBUTLABEL(MapTag,ApolloState.Name,MapID,LayerTag,label)
	end

	void HideButLabel(string label)
		print("Hide But Label:",label)
		AKTH.HIDEBUTLABEL(MapTag,ApolloState.Name,MapID,LayerTag,label)
	end
	
	Void ColorByLabel(String Label,Int R=255, int G=255, int B=255)
		AKTH.COLORBYLABEL(MapTag,ApolloState.Name,MapID,LayerTag,label,R,G,B)
	End
	
	Void TexByLabel(String Label,String Tex,String Kind="ALL")
		AKTH.TEXBYLABEL(MapTag,ApolloState.Name,MapID,LayerTag,label,Tex,Kind)
	End
	
	String SLabelEnum(String Label)
		Return AKTH.LABELENUM(MapTag,ApolloState.Name,MapID,LayerTag,Label)
	End
	
	get string LabelMapDump
		return AKTH.LABELMAPDUMP(MapTag,ApolloState.Name,MapID,LayerTag)
	end
	
	bool PixInObj(I_want,int x, int y)
		if Lua.type(I_want)=="string" && (!HasTag(I_want))
			return false
		end
		return Obj(I_want).PixInObj(I_want,x,y)
	end
	
	var NewObject(string nkind,ntag)
		ntag = ntag or ""
		int i = AKTH.NEWOBJ(MapTag,ApolloState.Name,MapID,LayerTag,nkind,ntag)
		return obj(i)
	end
	
	get delegate NewObj
		return NewObject
	end
	
	bool Blocked(int X, int Y, a)
		static table b2i
		b2i[false] = 0
		b2i[true] = 1
		return AKTH.BLOCKED(MapTag,ApolloState.Name,MapID,LayerTag,X,Y,b2i[a!=false])
	end
	
		

end

class KTHURA_Map
	readonly string Tag
	readonly int ID
	//readonly bool AutoDestroy
	readonly table Meta
	
	public Constructor(string T,int aID)
		Tag = T
		if aID<0
			ID=AKTH.CHECK(Tag,ApolloState.Name)
		else
			ID=aID
		End
		string MIndex(s,string key)
			return AKTH.MAPMETA(Tag,ApolloState.Name,ID,key)
		end
		void MNewIndex(s,string key, string value)
			Lua.error(sprintf("Value '%s' cannot be assinged to Kthura MetaData field '%s', since it's read-only!",value,key))
		end
		int MLen(s)
			return #self.MetaFields
		end
		Meta = Lua.setmetatable({},{["__index"]=MIndex, ["__newindex"]=MNewIndex,["__len"]=MLen})
	end
	
	Var Layer(string WantedLayer)
		//Print("Get:",WantedLayer," From ",Tag)
		return new KTHURA_Layer(ID,Tag,WantedLayer)
	End
	
	Get Table Layers
		return { AKTH.LAYERS(Tag,ApolloState.Name,ID) }
	End
	
	void Remap()
	//	     RemapAllLayers
		AKTH.REMAPALLLAYERS(Tag,ApolloState.Name,ID)
	end
	
	Void Draw(String LayerTag,int ScrollX=0, int ScrollY=0,int StartX=0,int StartY=0)
		//print("Pindapoepchinees: ",tag,LayerTag,scrollx,scrolly,startx,starty)
		AKTH.DRAW(Tag,ApolloState.Name,ID,LayerTag,ScrollX,ScrollY,StartX,StartY)
	End
	
	get table MetaFields
		return Split(AKTH.MAPMETAFIELDS(Tag,ApolloState.Name,ID),";")
	end
	
	
End

group Kthura

	var Load(string mapdir,string Tag="GAMEMAP")
		string gtag
		int id
		gtag,id = AKTH.LOAD(Tag,ApolloState.Name,mapdir)
		return new KTHURA_Map(gtag,id)
	end
	
	var Map(string tag)
		return new KTHURA_Map(tag,-1)
	end
	
	var Kill(string tag)
		AKTH.KILL(tag)
	end
	
	void AutoReMap(bool value)
		if value
			AKTH.AUTOREMAP(1)
		else
			AKTH.AUTOREMAP(0)
		end
	end
	
	readonly delegate SetAutoVisible=AKTH.SETAUTOVISIBLE
	readonly delegate KillAutoVisible=AKTH.KILLAUTOVISIBLE
	
	Static Var ScreenSize()
		Return AKTH.SCREENSIZE()
	END
	
	Static Get Int Width
		int x
		int y
		x,y = ScreenSize()
		return x
	End

	Static Get Int Height
		int x
		int y
		x,y = ScreenSize()
		return y
	End
	
	Static Get Int MX
		Return AKTH.MX()
	End
	
	Static Get Int MY
		Return AKTH.MY()
	End

end

// Everything Ok?