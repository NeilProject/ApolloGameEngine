// License Information:
// ARF_src/API/JCR6.neil
// Apollo - JCR6 - Link
// version: 22.07.18
// Copyright (C) 2020, 2021, 2022 Jeroen P. Broks
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

table AJCR = LGGTTT("AJCR")
import Apollo_Panic


// Placed outside the group to enforce it being a private!
string LastPoint=""


group JCR6
	readonly string State = ApolloState.Name
	
	Bool RemoveDupeSlashes = True
	string dEnt(string E)
		if !RemoveDupeSlashes
			Return E
		End
		string OE
		string NE = E
		repeat
			OE = NE
			NE = Replace(OE,"//","/")			
		until NE==OE
		return NE
	End

	//table Entries(string resource="*MPACKAGE")
	//	return { AJCR.ENTRIES(resource,State) }
	//end
	
	void Error(string msg)
		Lua.Error("JCR6 ERROR: "..msg)
	end
	
	table Entry
	void PointEntries(string resource="*MPACKAGE")
		LastPoint = resource
		AJCR.STARTENTRIES(resource,State)
	end
	
	Get Delegate Dir
		Return Self.GetDir
	End
	
	table GetDir(string dir,string resource="*MPACKAGE")
		//table ret
		//dir = dir:upper().."/"
		//for ent in each(Entries(resource))
		//	if prefixed(ent:upper(),dir)
		//		ret += ent
		//	end
		//end
		string tPoint = LastPoint
		if (resource!=LastPoint)
			PointEntries(resource)
		end
		
		table ret
		// Although ipairs() should work, I prefer this method in case future versions of Lua may be less forgiving on that
		int i = 1
		dir = dir:upper()
		if !suffixed(dir,"/")
			dir += "/"
		end
		while Entry[i]
			if prefixed(Entry[i]:upper(),dir)
				ret += Entry[i]
			end
			i++
		end
		if (resource!=LastPoint)
			PointEntries(LastPoint)
		end
		
		return ret
	end
	
	table GetDirNP(string dir,string resource="*MPACKAGE")
		var d = GetDir(dir,resource)
		var ret = {}
		if !suffixed(dir,"/")
			dir += "/"
		end
		for f in each(d)
			ret += right(f,#f-#dir)
		end
		return ret
	end
		
		
	
	string LoadString(string entry,string resource="*MPACKAGE")
		return AJCR.LOADSTRING(resource,State,entry)
	end
	
	Table LoadLines(string entry,string resource="*MPACKAGE")
		//return Split(LoadString(Entry,Resource),"\n")
		Var Ret = {}
		Int L = 1
		String S = LoadString(Entry,Resource)
		for i=1,#S
			String Ch=Mid(S,i,1)
			Ret[L] = Ret[L] || ""
			Switch Ch
				case "\n"
					L++
					Ret[L] = Ret[L] || ""
				case "\r"
					// IGNORE!
				default
					Ret[L]+=Ch
			End
		End
		Return Ret
	End
	
	int Size(string entry,string resource="*MPACKAGE")
		return AJCR.SIZE(resource,State,entry)
	end
	
//	var LoadBank(string entry,string ATag="",string resource="*MPACKAGE")
//		string Tag = AJCR.LOADBANK(State,resource,entry,ATag)
//		//print("Loadbank on tag: ",Tag)
//		return new Bank(0,Tag,true,ATag=="")
//	end
	
	bool EntryExists(string entry, string resource="*MPACKAGE")
		return AJCR.ENTRYEXISTS(resource,State,entry)
	end

	bool DirExists(string entry, string resource="*MPACKAGE")
		return AJCR.DIREXISTS(resource,State,entry)
	end

	
	ReadOnly Delegate HasEntry
	
	string ExtractDir(string file)
		return AJCR.EXTRACTDIR(file)
	end
	
	
	CONSTRUCTOR
		void nindex()
			error("JCR6.Entry is read-only")
		end
		var gindex(useless,int key)
			// Type is var to make "nil" returns possible, which is essential for this to work!
			return AJCR.GETENTRY(State,key)
		end
		Lua.setmetatable(Entry,{ ["__index"] = gindex, ["__newindex"] = nindex })
		PointEntries()
		HasEntry = EntryExists
	end
end