// License Information:
// ARF_src/API/Core.Neil
// Apollo Core API linkup
// version: 22.04.30
// Copyright (C) 2020, 2021, 2022 Jeroen P. Broks
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

import GoToFlow
import CurrentFlow
import KillFlow
import LoadFlow
import ApolloQuit
import nFPS
import sFPS
import showFPS
import MinTicks
import Ticks
import GetMinTicks
import LoadState
import KillState
import CallState
import HasState
import PKGDir
import PlanToKill
import WaitMinTicks
//import MD5
//import Sleep
// import Platform

global const delegate OpenURL = Lua.OpenURL
global const delegate MD5 = Lua.MD5
global const delegate aTan2 = Lua.aTan2
global const delegate IS_StackDump = Lua.INTERSTATE_CheckStack 

Group Core
	Get String PKGDir 
		Return Lua.PKGDir()
	End
	
	get String Platform
		return Lua.Platform()
	end
	
	get string FullPlatform
		return Lua.Platform(0)
	end
	
	Get String WinTitle
		Return Lua.WinTitle
	End
end

Group Sys
	ReadOnly Delegate Yes = Lua.Yes
	ReadOnly Delegate Annoy = Lua.Annoy
	ReadOnly Delegate Notify = Lua.Annoy
	Get String WinTitle
		Return Lua.WinTitle
	End
End
	

Group Flow
	ReadOnly Delegate GoToFlow = Lua.GoToFlow
	ReadOnly Delegate CurrentFlow = Lua.CurrentFlow
	ReadOnly Delegate Quit = Lua.ApolloQuit
	ReadOnly Delegate Kill = Lua.KillFlow
	ReadOnly Delegate Load = Lua.LoadFlow

	Get String Current
		return CurrentFlow()
	End

	Set String Current
		GoToFlow(value)
	End

End

Group State
	ReadOnly Delegate Load = LoadState
	ReadOnly Delegate Kill = KillState
	ReadOnly Delegate Call = CallState
	ReadOnly Delegate Has  =  HasState
	ReadOnly Delegate PlanToKill = Lua.PlanToKill
	ReadOnly Delegate GoToFlow = Lua.GoToFlow
	
	static void LoadNew(string State,string File)
		if not Has(State)
			Load(State,File)
		end
	end
	
	void LoadFlow(string FlState,string file)
		Load("FLOW_"..FlState,file)
	end
	
	Bool HasFlow(String Flw)
		Return Has("FLOW_"..Flw)
	End
	
end

Group FPS
	ReadOnly Delegate FN = nFPS
	ReadOnly Delegate FS = sFPS
	ReadOnly Delegate FMinTicks = MinTicks
	ReadOnly Delegate GetMinTicks = GetMinTicks
	
	Get Number N
		return FN()
	End
	Get String S
		return FS()
	End
	
	Get Int MinTicks
		return GetMinTicks()
	End
		
	Set Int MinTicks
		FMinTicks(value)
	End
	
	get int Ticks
		return Lua.Ticks()
	end
	
	ReadOnly Delegate Show = showFPS
	
	readonly Delegate WaitMinTicks = Lua.WaitMinTicks
	
	ReadOnly Delegate Sleep = Lua.Sleep
	
End


QuickMeta ISGET

	index
		string mkey
		switch key:upper()
			case "INT" "INTEGER"
				mkey = "Integer"
			case "STRING" "STR"
				mkey = "String"
			case "BOOL" "BOOLEAN"
				mkey = "Bool"
			default
				Lua.Apollo_Panic("Unknown ISGET member: "..key)
			end
		var TISGET(string state,string variable)
			return Lua["INTERSTATE_Get"..mkey](ApolloState.Name,state,variable)
		end
		return TISGET
	end
	
	newindex
		Lua.Apollo_Panic("ISGET is read-only!")
	end
end

global void ISSET(string key,string State,string varname, value)
	string mkey
	switch key:upper()
		case "INT" "INTEGER"
			mkey = "Integer"
		case "STRING" "STR"
			mkey = "String"
		case "BOOL" "BOOLEAN"
			mkey = "Bool"
			value = tostring(value)
		default
			Lua.Apollo_Panic("Unknown ISSET type: "..key)
	end
	//Print("INTERSTATE_Set"..mkey,Lua["INTERSTATE_Set"..mkey]," >> ",ApolloState.name,state,varname,value)
	Lua["INTERSTATE_Set"..mkey](ApolloState.name,state,varname,value)
End


global delegate Shell = Lua.Shell
global delegate Sleep = Lua.Sleep

global Bool ValueIsSomething(v)
	return v!=nil && v!=false && v!="" && v!=0
End

//Init
//	Print("DEBUG! Salut monde!") // Test output!
//End